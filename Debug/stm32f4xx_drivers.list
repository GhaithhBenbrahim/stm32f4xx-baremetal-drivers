
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000b9c  08000b9c  00001b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bb8  08000bb8  00001bc8  2**0
                  CONTENTS
  4 .ARM          00000008  08000bb8  08000bb8  00001bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000bc0  08000bc8  00001bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bc0  08000bc0  00001bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000bc4  08000bc4  00001bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001bc8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000124b  00000000  00000000  00001bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000044d  00000000  00000000  00002e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d8  00000000  00000000  000033c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000022ef  00000000  00000000  00003498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001891  00000000  00000000  00005787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000094de  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000104f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000404  00000000  00000000  0001053c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00010940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b84 	.word	0x08000b84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b84 	.word	0x08000b84

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:

#include<string.h>
#include "stm32f407xx.h"

void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	0007a11f 	.word	0x0007a11f

08000204 <SPI2_GPIOInits>:
 *

 */

void SPI2_GPIOInits(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800020a:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <SPI2_GPIOInits+0x4c>)
 800020c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000212:	2305      	movs	r3, #5
 8000214:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800021a:	2300      	movs	r3, #0
 800021c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000222:	230d      	movs	r3, #13
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f9a9 	bl	8000580 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800022e:	230f      	movs	r3, #15
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f9a3 	bl	8000580 <GPIO_Init>
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800023a:	230c      	movs	r3, #12
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f99d 	bl	8000580 <GPIO_Init>


}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020400 	.word	0x40020400

08000254 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800025a:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <SPI2_Inits+0x38>)
 800025c:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800025e:	2301      	movs	r3, #1
 8000260:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000262:	2301      	movs	r3, #1
 8000264:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000266:	2304      	movs	r3, #4
 8000268:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800026a:	2300      	movs	r3, #0
 800026c:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000276:	2300      	movs	r3, #0
 8000278:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 800027a:	463b      	mov	r3, r7
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fb89 	bl	8000994 <SPI_Init>
}
 8000282:	bf00      	nop
 8000284:	3720      	adds	r7, #32
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40003800 	.word	0x40003800

08000290 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000296:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <GPIO_ButtonInit+0x2c>)
 8000298:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800029a:	2300      	movs	r3, #0
 800029c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029e:	2300      	movs	r3, #0
 80002a0:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a2:	2302      	movs	r3, #2
 80002a4:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a6:	2300      	movs	r3, #0
 80002a8:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f967 	bl	8000580 <GPIO_Init>

}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40020000 	.word	0x40020000

080002c0 <main>:


int main(void)
{
 80002c0:	b5b0      	push	{r4, r5, r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
	char user_data[] = "Bare metal programming !";
 80002c6:	4b22      	ldr	r3, [pc, #136]	@ (8000350 <main+0x90>)
 80002c8:	1d3c      	adds	r4, r7, #4
 80002ca:	461d      	mov	r5, r3
 80002cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d4:	c403      	stmia	r4!, {r0, r1}
 80002d6:	7022      	strb	r2, [r4, #0]

	GPIO_ButtonInit();
 80002d8:	f7ff ffda 	bl	8000290 <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002dc:	f7ff ff92 	bl	8000204 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002e0:	f7ff ffb8 	bl	8000254 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 80002e4:	2101      	movs	r1, #1
 80002e6:	481b      	ldr	r0, [pc, #108]	@ (8000354 <main+0x94>)
 80002e8:	f000 fc0c 	bl	8000b04 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002ec:	bf00      	nop
 80002ee:	2100      	movs	r1, #0
 80002f0:	4819      	ldr	r0, [pc, #100]	@ (8000358 <main+0x98>)
 80002f2:	f000 fae1 	bl	80008b8 <GPIO_ReadFromInputPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f8      	beq.n	80002ee <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002fc:	f7ff ff6c 	bl	80001d8 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000300:	2101      	movs	r1, #1
 8000302:	4814      	ldr	r0, [pc, #80]	@ (8000354 <main+0x94>)
 8000304:	f000 fbe3 	bl	8000ace <SPI_PeripheralControl>

		//first send length information
		uint8_t dataLen = strlen(user_data);
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ff5c 	bl	80001c8 <strlen>
 8000310:	4603      	mov	r3, r0
 8000312:	b2db      	uxtb	r3, r3
 8000314:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&dataLen,1);
 8000316:	1cfb      	adds	r3, r7, #3
 8000318:	2201      	movs	r2, #1
 800031a:	4619      	mov	r1, r3
 800031c:	480d      	ldr	r0, [pc, #52]	@ (8000354 <main+0x94>)
 800031e:	f000 fba2 	bl	8000a66 <SPI_SendData>

		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff4f 	bl	80001c8 <strlen>
 800032a:	4602      	mov	r2, r0
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4619      	mov	r1, r3
 8000330:	4808      	ldr	r0, [pc, #32]	@ (8000354 <main+0x94>)
 8000332:	f000 fb98 	bl	8000a66 <SPI_SendData>

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000336:	bf00      	nop
 8000338:	2180      	movs	r1, #128	@ 0x80
 800033a:	4806      	ldr	r0, [pc, #24]	@ (8000354 <main+0x94>)
 800033c:	f000 fb80 	bl	8000a40 <SPI_GetFlagStatus>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d1f8      	bne.n	8000338 <main+0x78>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000346:	2100      	movs	r1, #0
 8000348:	4802      	ldr	r0, [pc, #8]	@ (8000354 <main+0x94>)
 800034a:	f000 fbc0 	bl	8000ace <SPI_PeripheralControl>
	{
 800034e:	e7cd      	b.n	80002ec <main+0x2c>
 8000350:	08000b9c 	.word	0x08000b9c
 8000354:	40003800 	.word	0x40003800
 8000358:	40020000 	.word	0x40020000

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	@ (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	@ (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	@ (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 fbd7 	bl	8000b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff97 	bl	80002c0 <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000bc8 	.word	0x08000bc8
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	2000001c 	.word	0x2000001c

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d162      	bne.n	8000488 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a64      	ldr	r2, [pc, #400]	@ (8000558 <GPIO_PeriClockControl+0x1a8>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003ca:	4b64      	ldr	r3, [pc, #400]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a63      	ldr	r2, [pc, #396]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80003d6:	e0b9      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a61      	ldr	r2, [pc, #388]	@ (8000560 <GPIO_PeriClockControl+0x1b0>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003e0:	4b5e      	ldr	r3, [pc, #376]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e4:	4a5d      	ldr	r2, [pc, #372]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ec:	e0ae      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a5c      	ldr	r2, [pc, #368]	@ (8000564 <GPIO_PeriClockControl+0x1b4>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003f6:	4b59      	ldr	r3, [pc, #356]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fa:	4a58      	ldr	r2, [pc, #352]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000402:	e0a3      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a58      	ldr	r2, [pc, #352]	@ (8000568 <GPIO_PeriClockControl+0x1b8>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800040c:	4b53      	ldr	r3, [pc, #332]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000410:	4a52      	ldr	r2, [pc, #328]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000418:	e098      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a53      	ldr	r2, [pc, #332]	@ (800056c <GPIO_PeriClockControl+0x1bc>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000422:	4b4e      	ldr	r3, [pc, #312]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000426:	4a4d      	ldr	r2, [pc, #308]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000428:	f043 0310 	orr.w	r3, r3, #16
 800042c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042e:	e08d      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a4f      	ldr	r2, [pc, #316]	@ (8000570 <GPIO_PeriClockControl+0x1c0>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000438:	4b48      	ldr	r3, [pc, #288]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043c:	4a47      	ldr	r2, [pc, #284]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000444:	e082      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a4a      	ldr	r2, [pc, #296]	@ (8000574 <GPIO_PeriClockControl+0x1c4>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800044e:	4b43      	ldr	r3, [pc, #268]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000452:	4a42      	ldr	r2, [pc, #264]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000458:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045a:	e077      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a46      	ldr	r2, [pc, #280]	@ (8000578 <GPIO_PeriClockControl+0x1c8>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000464:	4b3d      	ldr	r3, [pc, #244]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000468:	4a3c      	ldr	r2, [pc, #240]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 800046a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800046e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000470:	e06c      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a41      	ldr	r2, [pc, #260]	@ (800057c <GPIO_PeriClockControl+0x1cc>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d168      	bne.n	800054c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800047a:	4b38      	ldr	r3, [pc, #224]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047e:	4a37      	ldr	r2, [pc, #220]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000484:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000486:	e061      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a33      	ldr	r2, [pc, #204]	@ (8000558 <GPIO_PeriClockControl+0x1a8>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000490:	4b32      	ldr	r3, [pc, #200]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	4a31      	ldr	r2, [pc, #196]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000496:	f023 0301 	bic.w	r3, r3, #1
 800049a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049c:	e056      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a2f      	ldr	r2, [pc, #188]	@ (8000560 <GPIO_PeriClockControl+0x1b0>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80004a6:	4b2d      	ldr	r3, [pc, #180]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004aa:	4a2c      	ldr	r2, [pc, #176]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80004ac:	f023 0302 	bic.w	r3, r3, #2
 80004b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b2:	e04b      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000564 <GPIO_PeriClockControl+0x1b4>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80004bc:	4b27      	ldr	r3, [pc, #156]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c0:	4a26      	ldr	r2, [pc, #152]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80004c2:	f023 0304 	bic.w	r3, r3, #4
 80004c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c8:	e040      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a26      	ldr	r2, [pc, #152]	@ (8000568 <GPIO_PeriClockControl+0x1b8>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80004d2:	4b22      	ldr	r3, [pc, #136]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a21      	ldr	r2, [pc, #132]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80004d8:	f023 0308 	bic.w	r3, r3, #8
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004de:	e035      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a22      	ldr	r2, [pc, #136]	@ (800056c <GPIO_PeriClockControl+0x1bc>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80004e8:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a1b      	ldr	r2, [pc, #108]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 80004ee:	f023 0310 	bic.w	r3, r3, #16
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f4:	e02a      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000570 <GPIO_PeriClockControl+0x1c0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004fe:	4b17      	ldr	r3, [pc, #92]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a16      	ldr	r2, [pc, #88]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000504:	f023 0320 	bic.w	r3, r3, #32
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050a:	e01f      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a19      	ldr	r2, [pc, #100]	@ (8000574 <GPIO_PeriClockControl+0x1c4>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000518:	4a10      	ldr	r2, [pc, #64]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 800051a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800051e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000520:	e014      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a14      	ldr	r2, [pc, #80]	@ (8000578 <GPIO_PeriClockControl+0x1c8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a0b      	ldr	r2, [pc, #44]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000536:	e009      	b.n	800054c <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a10      	ldr	r2, [pc, #64]	@ (800057c <GPIO_PeriClockControl+0x1cc>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d105      	bne.n	800054c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000544:	4a05      	ldr	r2, [pc, #20]	@ (800055c <GPIO_PeriClockControl+0x1ac>)
 8000546:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800054a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40020000 	.word	0x40020000
 800055c:	40023800 	.word	0x40023800
 8000560:	40020400 	.word	0x40020400
 8000564:	40020800 	.word	0x40020800
 8000568:	40020c00 	.word	0x40020c00
 800056c:	40021000 	.word	0x40021000
 8000570:	40021400 	.word	0x40021400
 8000574:	40021800 	.word	0x40021800
 8000578:	40021c00 	.word	0x40021c00
 800057c:	40022000 	.word	0x40022000

08000580 <GPIO_Init>:
 * @return          - None
 *
 * @Note            - None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temporary register
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2101      	movs	r1, #1
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ff0c 	bl	80003b0 <GPIO_PeriClockControl>

	//1 . configure the mode of GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	795b      	ldrb	r3, [r3, #5]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d820      	bhi.n	80005e2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	2103      	movs	r1, #3
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	400a      	ands	r2, r1
 80005ce:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6819      	ldr	r1, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	430a      	orrs	r2, r1
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	e0cb      	b.n	800077a <GPIO_Init+0x1fa>

	}else
	{
		//( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	795b      	ldrb	r3, [r3, #5]
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d117      	bne.n	800061a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ea:	4b4b      	ldr	r3, [pc, #300]	@ (8000718 <GPIO_Init+0x198>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a47      	ldr	r2, [pc, #284]	@ (8000718 <GPIO_Init+0x198>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000600:	4b45      	ldr	r3, [pc, #276]	@ (8000718 <GPIO_Init+0x198>)
 8000602:	689b      	ldr	r3, [r3, #8]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	2201      	movs	r2, #1
 800060c:	408a      	lsls	r2, r1
 800060e:	43d2      	mvns	r2, r2
 8000610:	4611      	mov	r1, r2
 8000612:	4a41      	ldr	r2, [pc, #260]	@ (8000718 <GPIO_Init+0x198>)
 8000614:	400b      	ands	r3, r1
 8000616:	6093      	str	r3, [r2, #8]
 8000618:	e035      	b.n	8000686 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	795b      	ldrb	r3, [r3, #5]
 800061e:	2b05      	cmp	r3, #5
 8000620:	d117      	bne.n	8000652 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000622:	4b3d      	ldr	r3, [pc, #244]	@ (8000718 <GPIO_Init+0x198>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	7912      	ldrb	r2, [r2, #4]
 800062a:	4611      	mov	r1, r2
 800062c:	2201      	movs	r2, #1
 800062e:	408a      	lsls	r2, r1
 8000630:	4611      	mov	r1, r2
 8000632:	4a39      	ldr	r2, [pc, #228]	@ (8000718 <GPIO_Init+0x198>)
 8000634:	430b      	orrs	r3, r1
 8000636:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000638:	4b37      	ldr	r3, [pc, #220]	@ (8000718 <GPIO_Init+0x198>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	7912      	ldrb	r2, [r2, #4]
 8000640:	4611      	mov	r1, r2
 8000642:	2201      	movs	r2, #1
 8000644:	408a      	lsls	r2, r1
 8000646:	43d2      	mvns	r2, r2
 8000648:	4611      	mov	r1, r2
 800064a:	4a33      	ldr	r2, [pc, #204]	@ (8000718 <GPIO_Init+0x198>)
 800064c:	400b      	ands	r3, r1
 800064e:	60d3      	str	r3, [r2, #12]
 8000650:	e019      	b.n	8000686 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b06      	cmp	r3, #6
 8000658:	d115      	bne.n	8000686 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065a:	4b2f      	ldr	r3, [pc, #188]	@ (8000718 <GPIO_Init+0x198>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	7912      	ldrb	r2, [r2, #4]
 8000662:	4611      	mov	r1, r2
 8000664:	2201      	movs	r2, #1
 8000666:	408a      	lsls	r2, r1
 8000668:	4611      	mov	r1, r2
 800066a:	4a2b      	ldr	r2, [pc, #172]	@ (8000718 <GPIO_Init+0x198>)
 800066c:	430b      	orrs	r3, r1
 800066e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <GPIO_Init+0x198>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	7912      	ldrb	r2, [r2, #4]
 8000678:	4611      	mov	r1, r2
 800067a:	2201      	movs	r2, #1
 800067c:	408a      	lsls	r2, r1
 800067e:	4611      	mov	r1, r2
 8000680:	4a25      	ldr	r2, [pc, #148]	@ (8000718 <GPIO_Init+0x198>)
 8000682:	430b      	orrs	r3, r1
 8000684:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	089b      	lsrs	r3, r3, #2
 800068c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	f003 0303 	and.w	r3, r3, #3
 8000696:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1f      	ldr	r2, [pc, #124]	@ (800071c <GPIO_Init+0x19c>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d04e      	beq.n	8000740 <GPIO_Init+0x1c0>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000720 <GPIO_Init+0x1a0>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d032      	beq.n	8000712 <GPIO_Init+0x192>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000724 <GPIO_Init+0x1a4>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d02b      	beq.n	800070e <GPIO_Init+0x18e>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <GPIO_Init+0x1a8>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d024      	beq.n	800070a <GPIO_Init+0x18a>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a19      	ldr	r2, [pc, #100]	@ (800072c <GPIO_Init+0x1ac>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d01d      	beq.n	8000706 <GPIO_Init+0x186>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a18      	ldr	r2, [pc, #96]	@ (8000730 <GPIO_Init+0x1b0>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d016      	beq.n	8000702 <GPIO_Init+0x182>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a16      	ldr	r2, [pc, #88]	@ (8000734 <GPIO_Init+0x1b4>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d00f      	beq.n	80006fe <GPIO_Init+0x17e>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a15      	ldr	r2, [pc, #84]	@ (8000738 <GPIO_Init+0x1b8>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d008      	beq.n	80006fa <GPIO_Init+0x17a>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a13      	ldr	r2, [pc, #76]	@ (800073c <GPIO_Init+0x1bc>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d101      	bne.n	80006f6 <GPIO_Init+0x176>
 80006f2:	2308      	movs	r3, #8
 80006f4:	e025      	b.n	8000742 <GPIO_Init+0x1c2>
 80006f6:	2300      	movs	r3, #0
 80006f8:	e023      	b.n	8000742 <GPIO_Init+0x1c2>
 80006fa:	2307      	movs	r3, #7
 80006fc:	e021      	b.n	8000742 <GPIO_Init+0x1c2>
 80006fe:	2306      	movs	r3, #6
 8000700:	e01f      	b.n	8000742 <GPIO_Init+0x1c2>
 8000702:	2305      	movs	r3, #5
 8000704:	e01d      	b.n	8000742 <GPIO_Init+0x1c2>
 8000706:	2304      	movs	r3, #4
 8000708:	e01b      	b.n	8000742 <GPIO_Init+0x1c2>
 800070a:	2303      	movs	r3, #3
 800070c:	e019      	b.n	8000742 <GPIO_Init+0x1c2>
 800070e:	2302      	movs	r3, #2
 8000710:	e017      	b.n	8000742 <GPIO_Init+0x1c2>
 8000712:	2301      	movs	r3, #1
 8000714:	e015      	b.n	8000742 <GPIO_Init+0x1c2>
 8000716:	bf00      	nop
 8000718:	40013c00 	.word	0x40013c00
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400
 8000724:	40020800 	.word	0x40020800
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40021000 	.word	0x40021000
 8000730:	40021400 	.word	0x40021400
 8000734:	40021800 	.word	0x40021800
 8000738:	40021c00 	.word	0x40021c00
 800073c:	40022000 	.word	0x40022000
 8000740:	2300      	movs	r3, #0
 8000742:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000744:	4b59      	ldr	r3, [pc, #356]	@ (80008ac <GPIO_Init+0x32c>)
 8000746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000748:	4a58      	ldr	r2, [pc, #352]	@ (80008ac <GPIO_Init+0x32c>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000750:	7c7a      	ldrb	r2, [r7, #17]
 8000752:	7cbb      	ldrb	r3, [r7, #18]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	fa02 f103 	lsl.w	r1, r2, r3
 800075a:	4a55      	ldr	r2, [pc, #340]	@ (80008b0 <GPIO_Init+0x330>)
 800075c:	7cfb      	ldrb	r3, [r7, #19]
 800075e:	3302      	adds	r3, #2
 8000760:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000764:	4b53      	ldr	r3, [pc, #332]	@ (80008b4 <GPIO_Init+0x334>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	7912      	ldrb	r2, [r2, #4]
 800076c:	4611      	mov	r1, r2
 800076e:	2201      	movs	r2, #1
 8000770:	408a      	lsls	r2, r1
 8000772:	4611      	mov	r1, r2
 8000774:	4a4f      	ldr	r2, [pc, #316]	@ (80008b4 <GPIO_Init+0x334>)
 8000776:	430b      	orrs	r3, r1
 8000778:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	799b      	ldrb	r3, [r3, #6]
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	689a      	ldr	r2, [r3, #8]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	2103      	movs	r1, #3
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	400a      	ands	r2, r1
 80007a8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6899      	ldr	r1, [r3, #8]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	609a      	str	r2, [r3, #8]

	//3. configure the pull up pull down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	79db      	ldrb	r3, [r3, #7]
 80007be:	461a      	mov	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	2103      	movs	r1, #3
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	400a      	ands	r2, r1
 80007e8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68d9      	ldr	r1, [r3, #12]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	60da      	str	r2, [r3, #12]


	//4. configure the out put type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7a1b      	ldrb	r3, [r3, #8]
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	4619      	mov	r1, r3
 8000816:	2301      	movs	r3, #1
 8000818:	408b      	lsls	r3, r1
 800081a:	43db      	mvns	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	400a      	ands	r2, r1
 8000824:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6859      	ldr	r1, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	430a      	orrs	r2, r1
 8000834:	605a      	str	r2, [r3, #4]

	//5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	795b      	ldrb	r3, [r3, #5]
 800083a:	2b02      	cmp	r3, #2
 800083c:	d131      	bne.n	80008a2 <GPIO_Init+0x322>
	{
		//configure the alternate function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	08db      	lsrs	r3, r3, #3
 8000844:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	7c3a      	ldrb	r2, [r7, #16]
 8000856:	3208      	adds	r2, #8
 8000858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	220f      	movs	r2, #15
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	7c3a      	ldrb	r2, [r7, #16]
 8000870:	4001      	ands	r1, r0
 8000872:	3208      	adds	r2, #8
 8000874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	7c3a      	ldrb	r2, [r7, #16]
 800087e:	3208      	adds	r2, #8
 8000880:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7a5b      	ldrb	r3, [r3, #9]
 8000888:	461a      	mov	r2, r3
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	7c3a      	ldrb	r2, [r7, #16]
 800089a:	4301      	orrs	r1, r0
 800089c:	3208      	adds	r2, #8
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40013800 	.word	0x40013800
 80008b4:	40013c00 	.word	0x40013c00

080008b8 <GPIO_ReadFromInputPin>:
 *                    5. The function masks and shifts the IDR value to return only the
 *                       requested pin's state
 *                    6. Ensure the GPIO clock is enabled before calling this function
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
   uint8_t value;
   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 );
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	fa22 f303 	lsr.w	r3, r2, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
   return value;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
	...

080008e4 <SPI_PeriClockControl>:
*
* @Note              - Currently only implements clock enable functionality
*                    - Clock disable functionality
******************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d120      	bne.n	8000938 <SPI_PeriClockControl+0x54>
    {
        if(pSPIx == SPI1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a22      	ldr	r2, [pc, #136]	@ (8000984 <SPI_PeriClockControl+0xa0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <SPI_PeriClockControl+0x28>
        {
            SPI1_PCLK_EN();
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 8000904:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
    	 {
             SPI3_PCLK_DI();
    	 }

    }
}
 800090a:	e035      	b.n	8000978 <SPI_PeriClockControl+0x94>
        else if (pSPIx == SPI2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a1f      	ldr	r2, [pc, #124]	@ (800098c <SPI_PeriClockControl+0xa8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d106      	bne.n	8000922 <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	4a1b      	ldr	r2, [pc, #108]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800091e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000920:	e02a      	b.n	8000978 <SPI_PeriClockControl+0x94>
        else if (pSPIx == SPI3)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a1a      	ldr	r2, [pc, #104]	@ (8000990 <SPI_PeriClockControl+0xac>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d126      	bne.n	8000978 <SPI_PeriClockControl+0x94>
            SPI3_PCLK_EN();
 800092a:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	4a16      	ldr	r2, [pc, #88]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 8000930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000934:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000936:	e01f      	b.n	8000978 <SPI_PeriClockControl+0x94>
    	 if(pSPIx == SPI1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <SPI_PeriClockControl+0xa0>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <SPI_PeriClockControl+0x6a>
    		 SPI1_PCLK_DI();
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000944:	4a10      	ldr	r2, [pc, #64]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 8000946:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800094a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800094c:	e014      	b.n	8000978 <SPI_PeriClockControl+0x94>
         else if (pSPIx == SPI2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <SPI_PeriClockControl+0xa8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <SPI_PeriClockControl+0x80>
        	 SPI2_PCLK_DI();
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 800095c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000962:	e009      	b.n	8000978 <SPI_PeriClockControl+0x94>
    	 else if (pSPIx == SPI3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <SPI_PeriClockControl+0xac>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d105      	bne.n	8000978 <SPI_PeriClockControl+0x94>
             SPI3_PCLK_DI();
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	4a05      	ldr	r2, [pc, #20]	@ (8000988 <SPI_PeriClockControl+0xa4>)
 8000972:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000976:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40013000 	.word	0x40013000
 8000988:	40023800 	.word	0x40023800
 800098c:	40003800 	.word	0x40003800
 8000990:	40003c00 	.word	0x40003c00

08000994 <SPI_Init>:
*
* @Note              - Enables peripheral clock before configuration
*                    - Configures all essential SPI parameters in CR1 register
******************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
    // Enable peripheral clock
    SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2101      	movs	r1, #1
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ff9e 	bl	80008e4 <SPI_PeriClockControl>

    uint32_t tempreg = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]

    // 1. Configure device mode (Master/Slave)
    tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]

    // 2. Configure bus configuration
    if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d104      	bne.n	80009ca <SPI_Init+0x36>
    {
        // Full-duplex mode: clear BIDIMODE
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e014      	b.n	80009f4 <SPI_Init+0x60>
    }
    else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	795b      	ldrb	r3, [r3, #5]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d104      	bne.n	80009dc <SPI_Init+0x48>
    {
        // Half-duplex mode: set BIDIMODE
        tempreg |= (1 << SPI_CR1_BIDIMODE);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	e00b      	b.n	80009f4 <SPI_Init+0x60>
    }
    else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	795b      	ldrb	r3, [r3, #5]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d107      	bne.n	80009f4 <SPI_Init+0x60>
    {
        // Simplex RX-only mode: clear BIDIMODE, set RXONLY
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009ea:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << SPI_CR1_RXONLY);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009f2:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure serial clock speed (baud rate)
    tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	799b      	ldrb	r3, [r3, #6]
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]

    // 4. Configure data frame format (8-bit or 16-bit)
    tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	79db      	ldrb	r3, [r3, #7]
 8000a04:	02db      	lsls	r3, r3, #11
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

    // 5. Configure clock polarity (CPOL)
    tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7a1b      	ldrb	r3, [r3, #8]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]

    // 6. Configure clock phase (CPHA)
    tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7a5b      	ldrb	r3, [r3, #9]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]

    // 7. Configure software slave management (SSM)
    tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7a9b      	ldrb	r3, [r3, #10]
 8000a28:	025b      	lsls	r3, r3, #9
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]

    // Write configuration to CR1 register
    pSPIHandle->pSPIx->CR1 = tempreg;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <SPI_GetFlagStatus>:
        SPI3_REG_RESET();
    }
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689a      	ldr	r2, [r3, #8]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <SPI_SendData>:
*                    - Handles both 8-bit and 16-bit data frame formats
*                    - Automatically detects DFF setting (8/16-bit mode)
*                    - Decrements buffer pointer and length appropriately
******************************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
    while(Len > 0)
 8000a72:	e024      	b.n	8000abe <SPI_SendData+0x58>
    {
        // 1. Wait until TX buffer is empty (ready for new data)
        while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a74:	bf00      	nop
 8000a76:	2102      	movs	r1, #2
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f7ff ffe1 	bl	8000a40 <SPI_GetFlagStatus>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f8      	beq.n	8000a76 <SPI_SendData+0x10>

        // 2. Check data frame format (8-bit or 16-bit)
        if((pSPIx->CR1 & (1 << SPI_CR1_DFF)))
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00b      	beq.n	8000aa8 <SPI_SendData+0x42>
        {
            // 16-bit data frame format
            pSPIx->DR = *((uint16_t*)pTxBuffer);  // Load 16-bit data
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60da      	str	r2, [r3, #12]
            Len -= 2;                             // Decrement length counter
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3b02      	subs	r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
            pTxBuffer += 2;                       // Increment buffer pointer
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	e00a      	b.n	8000abe <SPI_SendData+0x58>
        }
        else
        {
            // 8-bit data frame format
            pSPIx->DR = *pTxBuffer;  // Load 8-bit data
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	60da      	str	r2, [r3, #12]
            Len--;                   // Decrement length counter
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
            pTxBuffer++;             // Increment buffer pointer
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
    while(Len > 0)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1d7      	bne.n	8000a74 <SPI_SendData+0xe>
        }
    }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ada:	78fb      	ldrb	r3, [r7, #3]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d106      	bne.n	8000aee <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000aec:	e005      	b.n	8000afa <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <SPI_SSOEConfig>:
*                     - When DISABLED: NSS signal must be managed manually
*                    - Only relevant in SPI master mode
*                    - Affects hardware NSS management
******************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d106      	bne.n	8000b24 <SPI_SSOEConfig+0x20>
    {
        // Enable Slave Select output (automatic NSS management)
        pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f043 0204 	orr.w	r2, r3, #4
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	605a      	str	r2, [r3, #4]
    else
    {
        // Disable Slave Select output (manual NSS management)
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
    }
}
 8000b22:	e005      	b.n	8000b30 <SPI_SSOEConfig+0x2c>
        pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f023 0204 	bic.w	r2, r3, #4
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	605a      	str	r2, [r3, #4]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
	...

08000b3c <__libc_init_array>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8000b74 <__libc_init_array+0x38>)
 8000b40:	4c0d      	ldr	r4, [pc, #52]	@ (8000b78 <__libc_init_array+0x3c>)
 8000b42:	1b64      	subs	r4, r4, r5
 8000b44:	10a4      	asrs	r4, r4, #2
 8000b46:	2600      	movs	r6, #0
 8000b48:	42a6      	cmp	r6, r4
 8000b4a:	d109      	bne.n	8000b60 <__libc_init_array+0x24>
 8000b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8000b7c <__libc_init_array+0x40>)
 8000b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8000b80 <__libc_init_array+0x44>)
 8000b50:	f000 f818 	bl	8000b84 <_init>
 8000b54:	1b64      	subs	r4, r4, r5
 8000b56:	10a4      	asrs	r4, r4, #2
 8000b58:	2600      	movs	r6, #0
 8000b5a:	42a6      	cmp	r6, r4
 8000b5c:	d105      	bne.n	8000b6a <__libc_init_array+0x2e>
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b64:	4798      	blx	r3
 8000b66:	3601      	adds	r6, #1
 8000b68:	e7ee      	b.n	8000b48 <__libc_init_array+0xc>
 8000b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b6e:	4798      	blx	r3
 8000b70:	3601      	adds	r6, #1
 8000b72:	e7f2      	b.n	8000b5a <__libc_init_array+0x1e>
 8000b74:	08000bc0 	.word	0x08000bc0
 8000b78:	08000bc0 	.word	0x08000bc0
 8000b7c:	08000bc0 	.word	0x08000bc0
 8000b80:	08000bc4 	.word	0x08000bc4

08000b84 <_init>:
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b86:	bf00      	nop
 8000b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8a:	bc08      	pop	{r3}
 8000b8c:	469e      	mov	lr, r3
 8000b8e:	4770      	bx	lr

08000b90 <_fini>:
 8000b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b92:	bf00      	nop
 8000b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b96:	bc08      	pop	{r3}
 8000b98:	469e      	mov	lr, r3
 8000b9a:	4770      	bx	lr
