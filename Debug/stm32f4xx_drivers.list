
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d20  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ea8  08000ea8  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ea8  08000ea8  00002010  2**0
                  CONTENTS
  4 .ARM          00000008  08000ea8  08000ea8  00001ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000eb0  08000eb0  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb0  08000eb0  00001eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000eb4  08000eb4  00001eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08000eb8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002010  2**0
                  CONTENTS
 10 .bss          00000040  20000010  20000010  00002010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00002010  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001561  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004e8  00000000  00000000  0000359b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00003a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012a  00000000  00000000  00003c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000228b  00000000  00000000  00003d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bf8  00000000  00000000  00005fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000096b1  00000000  00000000  00007bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001127e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005dc  00000000  00000000  000112c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  000118a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e90 	.word	0x08000e90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000e90 	.word	0x08000e90

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInits>:
SPI_Handle_t SPI2handle;
volatile uint8_t txComplete = 0;
char user_data[] = "Hello World!";

void SPI2_GPIOInits(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
    GPIO_Handle_t SPIPins;

    SPIPins.pGPIOx = GPIOB;
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <SPI2_GPIOInits+0x40>)
 80001e0:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

    //SCLK
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f9a9 	bl	8000554 <GPIO_Init>

    //MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f9a3 	bl	8000554 <GPIO_Init>
}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40020400 	.word	0x40020400

0800021c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
    SPI2handle.pSPIx = SPI2;
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <SPI2_Inits+0x40>)
 8000222:	4a0f      	ldr	r2, [pc, #60]	@ (8000260 <SPI2_Inits+0x44>)
 8000224:	601a      	str	r2, [r3, #0]
    SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000226:	4b0d      	ldr	r3, [pc, #52]	@ (800025c <SPI2_Inits+0x40>)
 8000228:	2201      	movs	r2, #1
 800022a:	715a      	strb	r2, [r3, #5]
    SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800022c:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <SPI2_Inits+0x40>)
 800022e:	2201      	movs	r2, #1
 8000230:	711a      	strb	r2, [r3, #4]
    SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; // generates sclk of 8MHz
 8000232:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <SPI2_Inits+0x40>)
 8000234:	2200      	movs	r2, #0
 8000236:	719a      	strb	r2, [r3, #6]
    SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000238:	4b08      	ldr	r3, [pc, #32]	@ (800025c <SPI2_Inits+0x40>)
 800023a:	2200      	movs	r2, #0
 800023c:	71da      	strb	r2, [r3, #7]
    SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_HIGH;
 800023e:	4b07      	ldr	r3, [pc, #28]	@ (800025c <SPI2_Inits+0x40>)
 8000240:	2201      	movs	r2, #1
 8000242:	721a      	strb	r2, [r3, #8]
    SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000244:	4b05      	ldr	r3, [pc, #20]	@ (800025c <SPI2_Inits+0x40>)
 8000246:	2200      	movs	r2, #0
 8000248:	725a      	strb	r2, [r3, #9]
    SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // software slave management enabled for NSS pin
 800024a:	4b04      	ldr	r3, [pc, #16]	@ (800025c <SPI2_Inits+0x40>)
 800024c:	2201      	movs	r2, #1
 800024e:	729a      	strb	r2, [r3, #10]

    SPI_Init(&SPI2handle);
 8000250:	4802      	ldr	r0, [pc, #8]	@ (800025c <SPI2_Inits+0x40>)
 8000252:	f000 fb73 	bl	800093c <SPI_Init>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000002c 	.word	0x2000002c
 8000260:	40003800 	.word	0x40003800

08000264 <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	460b      	mov	r3, r1
 800026e:	70fb      	strb	r3, [r7, #3]
    if(AppEv == SPI_EVENT_TX_CMPLT)
 8000270:	78fb      	ldrb	r3, [r7, #3]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d103      	bne.n	800027e <SPI_ApplicationEventCallback+0x1a>
    {
        txComplete = 1;
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <SPI_ApplicationEventCallback+0x34>)
 8000278:	2201      	movs	r2, #1
 800027a:	701a      	strb	r2, [r3, #0]
    else if(AppEv == SPI_EVENT_OVR_ERR)
    {
        // Handle overrun error
        SPI_ClearOVRFlag(pSPIHandle->pSPIx);
    }
}
 800027c:	e007      	b.n	800028e <SPI_ApplicationEventCallback+0x2a>
    else if(AppEv == SPI_EVENT_OVR_ERR)
 800027e:	78fb      	ldrb	r3, [r7, #3]
 8000280:	2b03      	cmp	r3, #3
 8000282:	d104      	bne.n	800028e <SPI_ApplicationEventCallback+0x2a>
        SPI_ClearOVRFlag(pSPIHandle->pSPIx);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fdce 	bl	8000e2a <SPI_ClearOVRFlag>
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	2000004c 	.word	0x2000004c

0800029c <main>:

int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
    // Initialize GPIO pins for SPI2
    SPI2_GPIOInits();
 80002a0:	f7ff ff9a 	bl	80001d8 <SPI2_GPIOInits>

    // Initialize SPI2 peripheral
    SPI2_Inits();
 80002a4:	f7ff ffba 	bl	800021c <SPI2_Inits>

    // Register callback
    SPI2handle.pTxBuffer = (uint8_t*)user_data;
 80002a8:	4b18      	ldr	r3, [pc, #96]	@ (800030c <main+0x70>)
 80002aa:	4a19      	ldr	r2, [pc, #100]	@ (8000310 <main+0x74>)
 80002ac:	60da      	str	r2, [r3, #12]
    SPI2handle.TxLen = strlen(user_data);
 80002ae:	4818      	ldr	r0, [pc, #96]	@ (8000310 <main+0x74>)
 80002b0:	f7ff ff8a 	bl	80001c8 <strlen>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4a15      	ldr	r2, [pc, #84]	@ (800030c <main+0x70>)
 80002b8:	6153      	str	r3, [r2, #20]
    SPI2handle.TxState = SPI_READY;
 80002ba:	4b14      	ldr	r3, [pc, #80]	@ (800030c <main+0x70>)
 80002bc:	2200      	movs	r2, #0
 80002be:	771a      	strb	r2, [r3, #28]

    // Enable SPI2 interrupt in NVIC
    SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	2024      	movs	r0, #36	@ 0x24
 80002c4:	f000 fbc6 	bl	8000a54 <SPI_IRQInterruptConfig>
    SPI_IRQPriorityConfig(IRQ_NO_SPI2, NVIC_IRQ_PRI15);
 80002c8:	210f      	movs	r1, #15
 80002ca:	2024      	movs	r0, #36	@ 0x24
 80002cc:	f000 fc46 	bl	8000b5c <SPI_IRQPriorityConfig>

    // Make NSS signal internally high to avoid MODF error
    SPI_SSIConfig(SPI2, ENABLE);
 80002d0:	2101      	movs	r1, #1
 80002d2:	4810      	ldr	r0, [pc, #64]	@ (8000314 <main+0x78>)
 80002d4:	f000 fba3 	bl	8000a1e <SPI_SSIConfig>

    // Enable the SPI2 peripheral
    SPI_PeripheralControl(SPI2, ENABLE);
 80002d8:	2101      	movs	r1, #1
 80002da:	480e      	ldr	r0, [pc, #56]	@ (8000314 <main+0x78>)
 80002dc:	f000 fb84 	bl	80009e8 <SPI_PeripheralControl>

    // Start interrupt-based transmission
    SPI_SendDataIT(&SPI2handle, (uint8_t*)user_data, strlen(user_data));
 80002e0:	480b      	ldr	r0, [pc, #44]	@ (8000310 <main+0x74>)
 80002e2:	f7ff ff71 	bl	80001c8 <strlen>
 80002e6:	4603      	mov	r3, r0
 80002e8:	461a      	mov	r2, r3
 80002ea:	4909      	ldr	r1, [pc, #36]	@ (8000310 <main+0x74>)
 80002ec:	4807      	ldr	r0, [pc, #28]	@ (800030c <main+0x70>)
 80002ee:	f000 fc5e 	bl	8000bae <SPI_SendDataIT>

    // Wait for transmission to complete
    while(!txComplete);
 80002f2:	bf00      	nop
 80002f4:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <main+0x7c>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0fa      	beq.n	80002f4 <main+0x58>

    // Disable the SPI2 peripheral
    SPI_PeripheralControl(SPI2, DISABLE);
 80002fe:	2100      	movs	r1, #0
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <main+0x78>)
 8000302:	f000 fb71 	bl	80009e8 <SPI_PeripheralControl>

    while(1);
 8000306:	bf00      	nop
 8000308:	e7fd      	b.n	8000306 <main+0x6a>
 800030a:	bf00      	nop
 800030c:	2000002c 	.word	0x2000002c
 8000310:	20000000 	.word	0x20000000
 8000314:	40003800 	.word	0x40003800
 8000318:	2000004c 	.word	0x2000004c

0800031c <SPI2_IRQHandler>:
    return 0;
}

// SPI2 interrupt handler
void SPI2_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
    SPI_IRQHandling(&SPI2handle);
 8000320:	4802      	ldr	r0, [pc, #8]	@ (800032c <SPI2_IRQHandler+0x10>)
 8000322:	f000 fc67 	bl	8000bf4 <SPI_IRQHandling>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000002c 	.word	0x2000002c

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 fd73 	bl	8000e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff9b 	bl	800029c <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000374:	08000eb8 	.word	0x08000eb8
  ldr r2, =_sbss
 8000378:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800037c:	20000050 	.word	0x20000050

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d162      	bne.n	800045c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a64      	ldr	r2, [pc, #400]	@ (800052c <GPIO_PeriClockControl+0x1a8>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800039e:	4b64      	ldr	r3, [pc, #400]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a2:	4a63      	ldr	r2, [pc, #396]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80003aa:	e0b9      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a61      	ldr	r2, [pc, #388]	@ (8000534 <GPIO_PeriClockControl+0x1b0>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003b4:	4b5e      	ldr	r3, [pc, #376]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b8:	4a5d      	ldr	r2, [pc, #372]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003ba:	f043 0302 	orr.w	r3, r3, #2
 80003be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c0:	e0ae      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a5c      	ldr	r2, [pc, #368]	@ (8000538 <GPIO_PeriClockControl+0x1b4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ca:	4b59      	ldr	r3, [pc, #356]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a58      	ldr	r2, [pc, #352]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d6:	e0a3      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a58      	ldr	r2, [pc, #352]	@ (800053c <GPIO_PeriClockControl+0x1b8>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003e0:	4b53      	ldr	r3, [pc, #332]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e4:	4a52      	ldr	r2, [pc, #328]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ec:	e098      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a53      	ldr	r2, [pc, #332]	@ (8000540 <GPIO_PeriClockControl+0x1bc>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	f043 0310 	orr.w	r3, r3, #16
 8000400:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000402:	e08d      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a4f      	ldr	r2, [pc, #316]	@ (8000544 <GPIO_PeriClockControl+0x1c0>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800040c:	4b48      	ldr	r3, [pc, #288]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000410:	4a47      	ldr	r2, [pc, #284]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000418:	e082      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a4a      	ldr	r2, [pc, #296]	@ (8000548 <GPIO_PeriClockControl+0x1c4>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000422:	4b43      	ldr	r3, [pc, #268]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000426:	4a42      	ldr	r2, [pc, #264]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800042c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042e:	e077      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a46      	ldr	r2, [pc, #280]	@ (800054c <GPIO_PeriClockControl+0x1c8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000438:	4b3d      	ldr	r3, [pc, #244]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043c:	4a3c      	ldr	r2, [pc, #240]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800043e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000442:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000444:	e06c      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a41      	ldr	r2, [pc, #260]	@ (8000550 <GPIO_PeriClockControl+0x1cc>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d168      	bne.n	8000520 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800044e:	4b38      	ldr	r3, [pc, #224]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000452:	4a37      	ldr	r2, [pc, #220]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000458:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045a:	e061      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a33      	ldr	r2, [pc, #204]	@ (800052c <GPIO_PeriClockControl+0x1a8>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000464:	4b32      	ldr	r3, [pc, #200]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000468:	4a31      	ldr	r2, [pc, #196]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000470:	e056      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a2f      	ldr	r2, [pc, #188]	@ (8000534 <GPIO_PeriClockControl+0x1b0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047e:	4a2c      	ldr	r2, [pc, #176]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000480:	f023 0302 	bic.w	r3, r3, #2
 8000484:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000486:	e04b      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a2b      	ldr	r2, [pc, #172]	@ (8000538 <GPIO_PeriClockControl+0x1b4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000496:	f023 0304 	bic.w	r3, r3, #4
 800049a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049c:	e040      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a26      	ldr	r2, [pc, #152]	@ (800053c <GPIO_PeriClockControl+0x1b8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80004a6:	4b22      	ldr	r3, [pc, #136]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004aa:	4a21      	ldr	r2, [pc, #132]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004ac:	f023 0308 	bic.w	r3, r3, #8
 80004b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b2:	e035      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a22      	ldr	r2, [pc, #136]	@ (8000540 <GPIO_PeriClockControl+0x1bc>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80004bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004c2:	f023 0310 	bic.w	r3, r3, #16
 80004c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c8:	e02a      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000544 <GPIO_PeriClockControl+0x1c0>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004d2:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a16      	ldr	r2, [pc, #88]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004d8:	f023 0320 	bic.w	r3, r3, #32
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004de:	e01f      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a19      	ldr	r2, [pc, #100]	@ (8000548 <GPIO_PeriClockControl+0x1c4>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f4:	e014      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a14      	ldr	r2, [pc, #80]	@ (800054c <GPIO_PeriClockControl+0x1c8>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050a:	e009      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <GPIO_PeriClockControl+0x1cc>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d105      	bne.n	8000520 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000518:	4a05      	ldr	r2, [pc, #20]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800051a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800051e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40020000 	.word	0x40020000
 8000530:	40023800 	.word	0x40023800
 8000534:	40020400 	.word	0x40020400
 8000538:	40020800 	.word	0x40020800
 800053c:	40020c00 	.word	0x40020c00
 8000540:	40021000 	.word	0x40021000
 8000544:	40021400 	.word	0x40021400
 8000548:	40021800 	.word	0x40021800
 800054c:	40021c00 	.word	0x40021c00
 8000550:	40022000 	.word	0x40022000

08000554 <GPIO_Init>:
 * @return          - None
 *
 * @Note            - None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temporary register
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff0c 	bl	8000384 <GPIO_PeriClockControl>

	//1 . configure the mode of GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d820      	bhi.n	80005b6 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	2103      	movs	r1, #3
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	43db      	mvns	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	400a      	ands	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6819      	ldr	r1, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	e0cb      	b.n	800074e <GPIO_Init+0x1fa>

	}else
	{
		//( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	795b      	ldrb	r3, [r3, #5]
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d117      	bne.n	80005ee <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005be:	4b4b      	ldr	r3, [pc, #300]	@ (80006ec <GPIO_Init+0x198>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a47      	ldr	r2, [pc, #284]	@ (80006ec <GPIO_Init+0x198>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d4:	4b45      	ldr	r3, [pc, #276]	@ (80006ec <GPIO_Init+0x198>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	43d2      	mvns	r2, r2
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a41      	ldr	r2, [pc, #260]	@ (80006ec <GPIO_Init+0x198>)
 80005e8:	400b      	ands	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
 80005ec:	e035      	b.n	800065a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	795b      	ldrb	r3, [r3, #5]
 80005f2:	2b05      	cmp	r3, #5
 80005f4:	d117      	bne.n	8000626 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f6:	4b3d      	ldr	r3, [pc, #244]	@ (80006ec <GPIO_Init+0x198>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	4611      	mov	r1, r2
 8000600:	2201      	movs	r2, #1
 8000602:	408a      	lsls	r2, r1
 8000604:	4611      	mov	r1, r2
 8000606:	4a39      	ldr	r2, [pc, #228]	@ (80006ec <GPIO_Init+0x198>)
 8000608:	430b      	orrs	r3, r1
 800060a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	4b37      	ldr	r3, [pc, #220]	@ (80006ec <GPIO_Init+0x198>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	43d2      	mvns	r2, r2
 800061c:	4611      	mov	r1, r2
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <GPIO_Init+0x198>)
 8000620:	400b      	ands	r3, r1
 8000622:	60d3      	str	r3, [r2, #12]
 8000624:	e019      	b.n	800065a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	2b06      	cmp	r3, #6
 800062c:	d115      	bne.n	800065a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062e:	4b2f      	ldr	r3, [pc, #188]	@ (80006ec <GPIO_Init+0x198>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	7912      	ldrb	r2, [r2, #4]
 8000636:	4611      	mov	r1, r2
 8000638:	2201      	movs	r2, #1
 800063a:	408a      	lsls	r2, r1
 800063c:	4611      	mov	r1, r2
 800063e:	4a2b      	ldr	r2, [pc, #172]	@ (80006ec <GPIO_Init+0x198>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <GPIO_Init+0x198>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	4611      	mov	r1, r2
 8000654:	4a25      	ldr	r2, [pc, #148]	@ (80006ec <GPIO_Init+0x198>)
 8000656:	430b      	orrs	r3, r1
 8000658:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a1f      	ldr	r2, [pc, #124]	@ (80006f0 <GPIO_Init+0x19c>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d04e      	beq.n	8000714 <GPIO_Init+0x1c0>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <GPIO_Init+0x1a0>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d032      	beq.n	80006e6 <GPIO_Init+0x192>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <GPIO_Init+0x1a4>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d02b      	beq.n	80006e2 <GPIO_Init+0x18e>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a1b      	ldr	r2, [pc, #108]	@ (80006fc <GPIO_Init+0x1a8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d024      	beq.n	80006de <GPIO_Init+0x18a>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	@ (8000700 <GPIO_Init+0x1ac>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d01d      	beq.n	80006da <GPIO_Init+0x186>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a18      	ldr	r2, [pc, #96]	@ (8000704 <GPIO_Init+0x1b0>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d016      	beq.n	80006d6 <GPIO_Init+0x182>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a16      	ldr	r2, [pc, #88]	@ (8000708 <GPIO_Init+0x1b4>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d00f      	beq.n	80006d2 <GPIO_Init+0x17e>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a15      	ldr	r2, [pc, #84]	@ (800070c <GPIO_Init+0x1b8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d008      	beq.n	80006ce <GPIO_Init+0x17a>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <GPIO_Init+0x1bc>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d101      	bne.n	80006ca <GPIO_Init+0x176>
 80006c6:	2308      	movs	r3, #8
 80006c8:	e025      	b.n	8000716 <GPIO_Init+0x1c2>
 80006ca:	2300      	movs	r3, #0
 80006cc:	e023      	b.n	8000716 <GPIO_Init+0x1c2>
 80006ce:	2307      	movs	r3, #7
 80006d0:	e021      	b.n	8000716 <GPIO_Init+0x1c2>
 80006d2:	2306      	movs	r3, #6
 80006d4:	e01f      	b.n	8000716 <GPIO_Init+0x1c2>
 80006d6:	2305      	movs	r3, #5
 80006d8:	e01d      	b.n	8000716 <GPIO_Init+0x1c2>
 80006da:	2304      	movs	r3, #4
 80006dc:	e01b      	b.n	8000716 <GPIO_Init+0x1c2>
 80006de:	2303      	movs	r3, #3
 80006e0:	e019      	b.n	8000716 <GPIO_Init+0x1c2>
 80006e2:	2302      	movs	r3, #2
 80006e4:	e017      	b.n	8000716 <GPIO_Init+0x1c2>
 80006e6:	2301      	movs	r3, #1
 80006e8:	e015      	b.n	8000716 <GPIO_Init+0x1c2>
 80006ea:	bf00      	nop
 80006ec:	40013c00 	.word	0x40013c00
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40021000 	.word	0x40021000
 8000704:	40021400 	.word	0x40021400
 8000708:	40021800 	.word	0x40021800
 800070c:	40021c00 	.word	0x40021c00
 8000710:	40022000 	.word	0x40022000
 8000714:	2300      	movs	r3, #0
 8000716:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000718:	4b59      	ldr	r3, [pc, #356]	@ (8000880 <GPIO_Init+0x32c>)
 800071a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071c:	4a58      	ldr	r2, [pc, #352]	@ (8000880 <GPIO_Init+0x32c>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000722:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000724:	7c7a      	ldrb	r2, [r7, #17]
 8000726:	7cbb      	ldrb	r3, [r7, #18]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	fa02 f103 	lsl.w	r1, r2, r3
 800072e:	4a55      	ldr	r2, [pc, #340]	@ (8000884 <GPIO_Init+0x330>)
 8000730:	7cfb      	ldrb	r3, [r7, #19]
 8000732:	3302      	adds	r3, #2
 8000734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000738:	4b53      	ldr	r3, [pc, #332]	@ (8000888 <GPIO_Init+0x334>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	7912      	ldrb	r2, [r2, #4]
 8000740:	4611      	mov	r1, r2
 8000742:	2201      	movs	r2, #1
 8000744:	408a      	lsls	r2, r1
 8000746:	4611      	mov	r1, r2
 8000748:	4a4f      	ldr	r2, [pc, #316]	@ (8000888 <GPIO_Init+0x334>)
 800074a:	430b      	orrs	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	799b      	ldrb	r3, [r3, #6]
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	2103      	movs	r1, #3
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	4619      	mov	r1, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	400a      	ands	r2, r1
 800077c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6899      	ldr	r1, [r3, #8]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	430a      	orrs	r2, r1
 800078c:	609a      	str	r2, [r3, #8]

	//3. configure the pull up pull down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	79db      	ldrb	r3, [r3, #7]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68da      	ldr	r2, [r3, #12]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	2103      	movs	r1, #3
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	400a      	ands	r2, r1
 80007bc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68d9      	ldr	r1, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	60da      	str	r2, [r3, #12]


	//4. configure the out put type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	7a1b      	ldrb	r3, [r3, #8]
 80007d2:	461a      	mov	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	4619      	mov	r1, r3
 80007ea:	2301      	movs	r3, #1
 80007ec:	408b      	lsls	r3, r1
 80007ee:	43db      	mvns	r3, r3
 80007f0:	4619      	mov	r1, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	400a      	ands	r2, r1
 80007f8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6859      	ldr	r1, [r3, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	430a      	orrs	r2, r1
 8000808:	605a      	str	r2, [r3, #4]

	//5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	795b      	ldrb	r3, [r3, #5]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d131      	bne.n	8000876 <GPIO_Init+0x322>
	{
		//configure the alternate function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791b      	ldrb	r3, [r3, #4]
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	791b      	ldrb	r3, [r3, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	7c3a      	ldrb	r2, [r7, #16]
 800082a:	3208      	adds	r2, #8
 800082c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	220f      	movs	r2, #15
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	7c3a      	ldrb	r2, [r7, #16]
 8000844:	4001      	ands	r1, r0
 8000846:	3208      	adds	r2, #8
 8000848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	7c3a      	ldrb	r2, [r7, #16]
 8000852:	3208      	adds	r2, #8
 8000854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7a5b      	ldrb	r3, [r3, #9]
 800085c:	461a      	mov	r2, r3
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	7c3a      	ldrb	r2, [r7, #16]
 800086e:	4301      	orrs	r1, r0
 8000870:	3208      	adds	r2, #8
 8000872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000876:	bf00      	nop
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40013800 	.word	0x40013800
 8000888:	40013c00 	.word	0x40013c00

0800088c <SPI_PeriClockControl>:
*
* @Note              - Currently only implements clock enable functionality
*                    - Clock disable functionality
******************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d120      	bne.n	80008e0 <SPI_PeriClockControl+0x54>
    {
        if(pSPIx == SPI1)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a22      	ldr	r2, [pc, #136]	@ (800092c <SPI_PeriClockControl+0xa0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <SPI_PeriClockControl+0x28>
        {
            SPI1_PCLK_EN();
 80008a6:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	4a21      	ldr	r2, [pc, #132]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 80008ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008b0:	6453      	str	r3, [r2, #68]	@ 0x44
    	 {
             SPI3_PCLK_DI();
    	 }

    }
}
 80008b2:	e035      	b.n	8000920 <SPI_PeriClockControl+0x94>
        else if (pSPIx == SPI2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000934 <SPI_PeriClockControl+0xa8>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d106      	bne.n	80008ca <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008c8:	e02a      	b.n	8000920 <SPI_PeriClockControl+0x94>
        else if (pSPIx == SPI3)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000938 <SPI_PeriClockControl+0xac>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d126      	bne.n	8000920 <SPI_PeriClockControl+0x94>
            SPI3_PCLK_EN();
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	4a16      	ldr	r2, [pc, #88]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 80008d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008dc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008de:	e01f      	b.n	8000920 <SPI_PeriClockControl+0x94>
    	 if(pSPIx == SPI1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a12      	ldr	r2, [pc, #72]	@ (800092c <SPI_PeriClockControl+0xa0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <SPI_PeriClockControl+0x6a>
    		 SPI1_PCLK_DI();
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 80008ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ec:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 80008ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008f2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008f4:	e014      	b.n	8000920 <SPI_PeriClockControl+0x94>
         else if (pSPIx == SPI2)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <SPI_PeriClockControl+0xa8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <SPI_PeriClockControl+0x80>
        	 SPI2_PCLK_DI();
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a0b      	ldr	r2, [pc, #44]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 8000904:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800090a:	e009      	b.n	8000920 <SPI_PeriClockControl+0x94>
    	 else if (pSPIx == SPI3)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <SPI_PeriClockControl+0xac>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d105      	bne.n	8000920 <SPI_PeriClockControl+0x94>
             SPI3_PCLK_DI();
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	4a05      	ldr	r2, [pc, #20]	@ (8000930 <SPI_PeriClockControl+0xa4>)
 800091a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800091e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40013000 	.word	0x40013000
 8000930:	40023800 	.word	0x40023800
 8000934:	40003800 	.word	0x40003800
 8000938:	40003c00 	.word	0x40003c00

0800093c <SPI_Init>:
*
* @Note              - Enables peripheral clock before configuration
*                    - Configures all essential SPI parameters in CR1 register
******************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    // Enable peripheral clock
    SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2101      	movs	r1, #1
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ff9e 	bl	800088c <SPI_PeriClockControl>

    uint32_t tempreg = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]

    // 1. Configure device mode (Master/Slave)
    tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4313      	orrs	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]

    // 2. Configure bus configuration
    if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d104      	bne.n	8000972 <SPI_Init+0x36>
    {
        // Full-duplex mode: clear BIDIMODE
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	e014      	b.n	800099c <SPI_Init+0x60>
    }
    else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	795b      	ldrb	r3, [r3, #5]
 8000976:	2b02      	cmp	r3, #2
 8000978:	d104      	bne.n	8000984 <SPI_Init+0x48>
    {
        // Half-duplex mode: set BIDIMODE
        tempreg |= (1 << SPI_CR1_BIDIMODE);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e00b      	b.n	800099c <SPI_Init+0x60>
    }
    else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	795b      	ldrb	r3, [r3, #5]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d107      	bne.n	800099c <SPI_Init+0x60>
    {
        // Simplex RX-only mode: clear BIDIMODE, set RXONLY
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000992:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << SPI_CR1_RXONLY);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099a:	60fb      	str	r3, [r7, #12]
    }

    // 3. Configure serial clock speed (baud rate)
    tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	799b      	ldrb	r3, [r3, #6]
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]

    // 4. Configure data frame format (8-bit or 16-bit)
    tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	79db      	ldrb	r3, [r3, #7]
 80009ac:	02db      	lsls	r3, r3, #11
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]

    // 5. Configure clock polarity (CPOL)
    tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7a1b      	ldrb	r3, [r3, #8]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]

    // 6. Configure clock phase (CPHA)
    tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7a5b      	ldrb	r3, [r3, #9]
 80009c4:	461a      	mov	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

    // 7. Configure software slave management (SSM)
    tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7a9b      	ldrb	r3, [r3, #10]
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

    // Write configuration to CR1 register
    pSPIHandle->pSPIx->CR1 = tempreg;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d106      	bne.n	8000a08 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000a06:	e005      	b.n	8000a14 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <SPI_SSIConfig>:
 *
 * @Note              -

 */
void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	460b      	mov	r3, r1
 8000a28:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d106      	bne.n	8000a3e <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
	}


}
 8000a3c:	e005      	b.n	8000a4a <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SPI_IRQInterruptConfig>:
 *                       based on the IRQ number
 *                    3. For Cortex-M processors with different NVIC register layouts,
 *                       this function may need modification
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	4613      	mov	r3, r2
 8000a62:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d133      	bne.n	8000ad2 <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b1f      	cmp	r3, #31
 8000a6e:	d80a      	bhi.n	8000a86 <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000a70:	4b34      	ldr	r3, [pc, #208]	@ (8000b44 <SPI_IRQInterruptConfig+0xf0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	2101      	movs	r1, #1
 8000a78:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4a31      	ldr	r2, [pc, #196]	@ (8000b44 <SPI_IRQInterruptConfig+0xf0>)
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}
}
 8000a84:	e059      	b.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b1f      	cmp	r3, #31
 8000a8a:	d90f      	bls.n	8000aac <SPI_IRQInterruptConfig+0x58>
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a90:	d80c      	bhi.n	8000aac <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000a92:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <SPI_IRQInterruptConfig+0xf4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	f002 021f 	and.w	r2, r2, #31
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4a28      	ldr	r2, [pc, #160]	@ (8000b48 <SPI_IRQInterruptConfig+0xf4>)
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	e046      	b.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ab0:	d943      	bls.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ab6:	d840      	bhi.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000ab8:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <SPI_IRQInterruptConfig+0xf8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	79fa      	ldrb	r2, [r7, #7]
 8000abe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4a20      	ldr	r2, [pc, #128]	@ (8000b4c <SPI_IRQInterruptConfig+0xf8>)
 8000acc:	430b      	orrs	r3, r1
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	e033      	b.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b1f      	cmp	r3, #31
 8000ad6:	d80a      	bhi.n	8000aee <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <SPI_IRQInterruptConfig+0xfc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <SPI_IRQInterruptConfig+0xfc>)
 8000ae8:	430b      	orrs	r3, r1
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	e025      	b.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	2b1f      	cmp	r3, #31
 8000af2:	d90f      	bls.n	8000b14 <SPI_IRQInterruptConfig+0xc0>
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000af8:	d80c      	bhi.n	8000b14 <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <SPI_IRQInterruptConfig+0x100>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	f002 021f 	and.w	r2, r2, #31
 8000b04:	2101      	movs	r1, #1
 8000b06:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4a11      	ldr	r2, [pc, #68]	@ (8000b54 <SPI_IRQInterruptConfig+0x100>)
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	e012      	b.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d90f      	bls.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000b1e:	d80c      	bhi.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000b20:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <SPI_IRQInterruptConfig+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b30:	4611      	mov	r1, r2
 8000b32:	4a09      	ldr	r2, [pc, #36]	@ (8000b58 <SPI_IRQInterruptConfig+0x104>)
 8000b34:	430b      	orrs	r3, r1
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	e7ff      	b.n	8000b3a <SPI_IRQInterruptConfig+0xe6>
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000e104 	.word	0xe000e104
 8000b4c:	e000e10c 	.word	0xe000e10c
 8000b50:	e000e180 	.word	0xe000e180
 8000b54:	e000e184 	.word	0xe000e184
 8000b58:	e000e18c 	.word	0xe000e18c

08000b5c <SPI_IRQPriorityConfig>:
 *                    3. NO_PR_BITS_IMPLEMENTED should be defined based on the MCU's
 *                       actual implemented priority bits
 *                    4. Priority value is shifted to occupy the implemented priority bits
 */
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000b88:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000b8c:	6819      	ldr	r1, [r3, #0]
 8000b8e:	7b7b      	ldrb	r3, [r7, #13]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	409a      	lsls	r2, r3
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000b9c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <SPI_SendDataIT>:
 *                    3. The actual transmission happens in the interrupt service routine
 *                    4. Caller should check return value to know if transmission was started
 *                    5. TXEIE (Transmit buffer empty interrupt enable) is enabled
 */
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b087      	sub	sp, #28
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	7f1b      	ldrb	r3, [r3, #28]
 8000bbe:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d010      	beq.n	8000be8 <SPI_SendDataIT+0x3a>
	{
		//1 . Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	615a      	str	r2, [r3, #20]
		//2.  Mark the SPI state as busy in transmission so that
		//    no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	771a      	strb	r2, [r3, #28]

		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000be6:	605a      	str	r2, [r3, #4]

	}


	return state;
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	371c      	adds	r7, #28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <SPI_IRQHandling>:
 *                    6. Disables interrupts when transfer is complete
 *                    7. Resets state to READY when transfer completes
 *                    8. Handles both master and slave modes
 */
void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	uint8_t temp1 , temp2;
	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000c16:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d005      	beq.n	8000c2a <SPI_IRQHandling+0x36>
 8000c1e:	7bbb      	ldrb	r3, [r7, #14]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f832 	bl	8000c8e <spi_txe_interrupt_handle>
	}

	// check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c44:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d005      	beq.n	8000c58 <SPI_IRQHandling+0x64>
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d002      	beq.n	8000c58 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f85b 	bl	8000d0e <spi_rxne_interrupt_handle>
	}

	// check for ovr flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c64:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 0320 	and.w	r3, r3, #32
 8000c72:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d005      	beq.n	8000c86 <SPI_IRQHandling+0x92>
 8000c7a:	7bbb      	ldrb	r3, [r7, #14]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <SPI_IRQHandling+0x92>
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 f886 	bl	8000d92 <spi_ovr_err_interrupt_handle>
	}
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <spi_txe_interrupt_handle>:

//some helper function implementations

static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
	// check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d015      	beq.n	8000cd0 <spi_txe_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	881a      	ldrh	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	1e5a      	subs	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	1e5a      	subs	r2, r3, #1
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	e00f      	b.n	8000cf0 <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR =   *pSPIHandle->pTxBuffer;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	1e5a      	subs	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d106      	bne.n	8000d06 <spi_txe_interrupt_handle+0x78>
	{
		//TxLen is zero , so close the spi transmission and inform the application that
		//TX is over.

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f862 	bl	8000dc2 <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 8000cfe:	2101      	movs	r1, #1
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff faaf 	bl	8000264 <SPI_ApplicationEventCallback>
	}

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <spi_rxne_interrupt_handle>:


static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
	//do rxing as per the dff
	if(pSPIHandle->pSPIx->CR1 & ( 1 << 11))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d016      	beq.n	8000d52 <spi_rxne_interrupt_handle+0x44>
	{
		//16 bit
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	1e9a      	subs	r2, r3, #2
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	691b      	ldr	r3, [r3, #16]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	e010      	b.n	8000d74 <spi_rxne_interrupt_handle+0x66>

	}else
	{
		//8 bit
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	1e5a      	subs	r2, r3, #1
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d106      	bne.n	8000d8a <spi_rxne_interrupt_handle+0x7c>
	{
		//reception is complete
		SPI_CloseReception(pSPIHandle);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f000 f83a 	bl	8000df6 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 8000d82:	2102      	movs	r1, #2
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fa6d 	bl	8000264 <SPI_ApplicationEventCallback>
	}

}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <spi_ovr_err_interrupt_handle>:


static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7f1b      	ldrb	r3, [r3, #28]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d007      	beq.n	8000db2 <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 8000db2:	2103      	movs	r1, #3
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff fa55 	bl	8000264 <SPI_ApplicationEventCallback>

}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <SPI_CloseTransmisson>:


void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dd8:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL ;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	771a      	strb	r2, [r3, #28]

}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e0c:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	775a      	strb	r2, [r3, #29]

}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <SPI_ClearOVRFlag>:



void SPI_ClearOVRFlag(SPI_RegDef_t *pSPIx)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	temp = pSPIx->DR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	73fb      	strb	r3, [r7, #15]
	temp = pSPIx->SR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	73fb      	strb	r3, [r7, #15]
	(void)temp;

}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <__libc_init_array>:
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8000e80 <__libc_init_array+0x38>)
 8000e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8000e84 <__libc_init_array+0x3c>)
 8000e4e:	1b64      	subs	r4, r4, r5
 8000e50:	10a4      	asrs	r4, r4, #2
 8000e52:	2600      	movs	r6, #0
 8000e54:	42a6      	cmp	r6, r4
 8000e56:	d109      	bne.n	8000e6c <__libc_init_array+0x24>
 8000e58:	4d0b      	ldr	r5, [pc, #44]	@ (8000e88 <__libc_init_array+0x40>)
 8000e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8000e8c <__libc_init_array+0x44>)
 8000e5c:	f000 f818 	bl	8000e90 <_init>
 8000e60:	1b64      	subs	r4, r4, r5
 8000e62:	10a4      	asrs	r4, r4, #2
 8000e64:	2600      	movs	r6, #0
 8000e66:	42a6      	cmp	r6, r4
 8000e68:	d105      	bne.n	8000e76 <__libc_init_array+0x2e>
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}
 8000e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e70:	4798      	blx	r3
 8000e72:	3601      	adds	r6, #1
 8000e74:	e7ee      	b.n	8000e54 <__libc_init_array+0xc>
 8000e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7a:	4798      	blx	r3
 8000e7c:	3601      	adds	r6, #1
 8000e7e:	e7f2      	b.n	8000e66 <__libc_init_array+0x1e>
 8000e80:	08000eb0 	.word	0x08000eb0
 8000e84:	08000eb0 	.word	0x08000eb0
 8000e88:	08000eb0 	.word	0x08000eb0
 8000e8c:	08000eb4 	.word	0x08000eb4

08000e90 <_init>:
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e92:	bf00      	nop
 8000e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e96:	bc08      	pop	{r3}
 8000e98:	469e      	mov	lr, r3
 8000e9a:	4770      	bx	lr

08000e9c <_fini>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	bf00      	nop
 8000ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea2:	bc08      	pop	{r3}
 8000ea4:	469e      	mov	lr, r3
 8000ea6:	4770      	bx	lr
