
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c64  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dec  08000dec  00002034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dec  08000dec  00002034  2**0
                  CONTENTS
  4 .ARM          00000008  08000dec  08000dec  00001dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000df4  08000df4  00002034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df4  08000df4  00001df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000df8  08000df8  00001df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08000dfc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002034  2**0
                  CONTENTS
 10 .bss          00000044  20000034  20000034  00002034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  00002034  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001398  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000050d  00000000  00000000  000033f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00003908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f7  00000000  00000000  00003a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000281c  00000000  00000000  00003b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a7f  00000000  00000000  00006373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a371  00000000  00000000  00007df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012163  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004b0  00000000  00000000  000121a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00012658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000dd4 	.word	0x08000dd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08000dd4 	.word	0x08000dd4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:
#define STM_ADDR 0x61;

#define SLAVE_ADDR  0x68

void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	0007a11f 	.word	0x0007a11f

08000204 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB9 or PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	/*Note : Internal pull-up resistors are used */

	I2CPins.pGPIOx = GPIOB;
 800020a:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <I2C1_GPIOInits+0x40>)
 800020c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000212:	2301      	movs	r3, #1
 8000214:	733b      	strb	r3, [r7, #12]
	/*
	 * Note : In the below line use GPIO_NO_PUPD option if you want to use external pullup resistors, then you have to use 3.3K pull up resistors
	 * for both SDA and SCL lines
	 */
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000216:	2301      	movs	r3, #1
 8000218:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800021a:	2304      	movs	r3, #4
 800021c:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000222:	2306      	movs	r3, #6
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f97f 	bl	800052c <GPIO_Init>


	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800022e:	2307      	movs	r3, #7
 8000230:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f979 	bl	800052c <GPIO_Init>


}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020400 	.word	0x40020400

08000248 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <I2C1_Inits+0x2c>)
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <I2C1_Inits+0x30>)
 8000250:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000252:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <I2C1_Inits+0x2c>)
 8000254:	2201      	movs	r2, #1
 8000256:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = STM_ADDR;
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <I2C1_Inits+0x2c>)
 800025a:	2261      	movs	r2, #97	@ 0x61
 800025c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800025e:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <I2C1_Inits+0x2c>)
 8000260:	2200      	movs	r2, #0
 8000262:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000264:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <I2C1_Inits+0x2c>)
 8000266:	4a05      	ldr	r2, [pc, #20]	@ (800027c <I2C1_Inits+0x34>)
 8000268:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800026a:	4802      	ldr	r0, [pc, #8]	@ (8000274 <I2C1_Inits+0x2c>)
 800026c:	f000 fc4c 	bl	8000b08 <I2C_Init>

}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000050 	.word	0x20000050
 8000278:	40005400 	.word	0x40005400
 800027c:	000186a0 	.word	0x000186a0

08000280 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000286:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <GPIO_ButtonInit+0x2c>)
 8000288:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800028a:	2300      	movs	r3, #0
 800028c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028e:	2300      	movs	r3, #0
 8000290:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000292:	2302      	movs	r3, #2
 8000294:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000296:	2300      	movs	r3, #0
 8000298:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f945 	bl	800052c <GPIO_Init>

}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40020000 	.word	0x40020000

080002b0 <main>:


int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af02      	add	r7, sp, #8

	GPIO_ButtonInit();
 80002b6:	f7ff ffe3 	bl	8000280 <GPIO_ButtonInit>

	//i2c pin init
	I2C1_GPIOInits();
 80002ba:	f7ff ffa3 	bl	8000204 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002be:	f7ff ffc3 	bl	8000248 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002c2:	2101      	movs	r1, #1
 80002c4:	480c      	ldr	r0, [pc, #48]	@ (80002f8 <main+0x48>)
 80002c6:	f000 fb4c 	bl	8000962 <I2C_PeripheralControl>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002ca:	bf00      	nop
 80002cc:	2100      	movs	r1, #0
 80002ce:	480b      	ldr	r0, [pc, #44]	@ (80002fc <main+0x4c>)
 80002d0:	f000 fac8 	bl	8000864 <GPIO_ReadFromInputPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f8      	beq.n	80002cc <main+0x1c>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002da:	f7ff ff7d 	bl	80001d8 <delay>

		//send some data to the slave
		I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR,0);
 80002de:	4808      	ldr	r0, [pc, #32]	@ (8000300 <main+0x50>)
 80002e0:	f7ff ff72 	bl	80001c8 <strlen>
 80002e4:	4602      	mov	r2, r0
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2368      	movs	r3, #104	@ 0x68
 80002ec:	4904      	ldr	r1, [pc, #16]	@ (8000300 <main+0x50>)
 80002ee:	4805      	ldr	r0, [pc, #20]	@ (8000304 <main+0x54>)
 80002f0:	f000 fccd 	bl	8000c8e <I2C_MasterSendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002f4:	e7e9      	b.n	80002ca <main+0x1a>
 80002f6:	bf00      	nop
 80002f8:	40005400 	.word	0x40005400
 80002fc:	40020000 	.word	0x40020000
 8000300:	20000000 	.word	0x20000000
 8000304:	20000050 	.word	0x20000050

08000308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000308:	480d      	ldr	r0, [pc, #52]	@ (8000340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800030c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	@ (8000344 <LoopForever+0x6>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	@ (8000348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	@ (800034c <LoopForever+0xe>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	@ (8000354 <LoopForever+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000336:	f000 fd29 	bl	8000d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ffb9 	bl	80002b0 <main>

0800033e <LoopForever>:

LoopForever:
  b LoopForever
 800033e:	e7fe      	b.n	800033e <LoopForever>
  ldr   r0, =_estack
 8000340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800034c:	08000dfc 	.word	0x08000dfc
  ldr r2, =_sbss
 8000350:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000354:	20000078 	.word	0x20000078

08000358 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC_IRQHandler>
	...

0800035c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	2b01      	cmp	r3, #1
 800036c:	d162      	bne.n	8000434 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a64      	ldr	r2, [pc, #400]	@ (8000504 <GPIO_PeriClockControl+0x1a8>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000376:	4b64      	ldr	r3, [pc, #400]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a63      	ldr	r2, [pc, #396]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if (pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000382:	e0b9      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a61      	ldr	r2, [pc, #388]	@ (800050c <GPIO_PeriClockControl+0x1b0>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800038c:	4b5e      	ldr	r3, [pc, #376]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4a5d      	ldr	r2, [pc, #372]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000398:	e0ae      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a5c      	ldr	r2, [pc, #368]	@ (8000510 <GPIO_PeriClockControl+0x1b4>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003a2:	4b59      	ldr	r3, [pc, #356]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	4a58      	ldr	r2, [pc, #352]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ae:	e0a3      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a58      	ldr	r2, [pc, #352]	@ (8000514 <GPIO_PeriClockControl+0x1b8>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003b8:	4b53      	ldr	r3, [pc, #332]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003bc:	4a52      	ldr	r2, [pc, #328]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c4:	e098      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a53      	ldr	r2, [pc, #332]	@ (8000518 <GPIO_PeriClockControl+0x1bc>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003ce:	4b4e      	ldr	r3, [pc, #312]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a4d      	ldr	r2, [pc, #308]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003d4:	f043 0310 	orr.w	r3, r3, #16
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003da:	e08d      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a4f      	ldr	r2, [pc, #316]	@ (800051c <GPIO_PeriClockControl+0x1c0>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003e4:	4b48      	ldr	r3, [pc, #288]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e8:	4a47      	ldr	r2, [pc, #284]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f0:	e082      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a4a      	ldr	r2, [pc, #296]	@ (8000520 <GPIO_PeriClockControl+0x1c4>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003fa:	4b43      	ldr	r3, [pc, #268]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fe:	4a42      	ldr	r2, [pc, #264]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000404:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000406:	e077      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a46      	ldr	r2, [pc, #280]	@ (8000524 <GPIO_PeriClockControl+0x1c8>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000410:	4b3d      	ldr	r3, [pc, #244]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000414:	4a3c      	ldr	r2, [pc, #240]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800041a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041c:	e06c      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a41      	ldr	r2, [pc, #260]	@ (8000528 <GPIO_PeriClockControl+0x1cc>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d168      	bne.n	80004f8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000426:	4b38      	ldr	r3, [pc, #224]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042a:	4a37      	ldr	r2, [pc, #220]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 800042c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000430:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000432:	e061      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a33      	ldr	r2, [pc, #204]	@ (8000504 <GPIO_PeriClockControl+0x1a8>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 800043c:	4b32      	ldr	r3, [pc, #200]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000440:	4a31      	ldr	r2, [pc, #196]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000442:	f023 0301 	bic.w	r3, r3, #1
 8000446:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000448:	e056      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a2f      	ldr	r2, [pc, #188]	@ (800050c <GPIO_PeriClockControl+0x1b0>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000452:	4b2d      	ldr	r3, [pc, #180]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000456:	4a2c      	ldr	r2, [pc, #176]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000458:	f023 0302 	bic.w	r3, r3, #2
 800045c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045e:	e04b      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a2b      	ldr	r2, [pc, #172]	@ (8000510 <GPIO_PeriClockControl+0x1b4>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000468:	4b27      	ldr	r3, [pc, #156]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046c:	4a26      	ldr	r2, [pc, #152]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 800046e:	f023 0304 	bic.w	r3, r3, #4
 8000472:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000474:	e040      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a26      	ldr	r2, [pc, #152]	@ (8000514 <GPIO_PeriClockControl+0x1b8>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800047e:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000482:	4a21      	ldr	r2, [pc, #132]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000484:	f023 0308 	bic.w	r3, r3, #8
 8000488:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048a:	e035      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a22      	ldr	r2, [pc, #136]	@ (8000518 <GPIO_PeriClockControl+0x1bc>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000494:	4b1c      	ldr	r3, [pc, #112]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000498:	4a1b      	ldr	r2, [pc, #108]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 800049a:	f023 0310 	bic.w	r3, r3, #16
 800049e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a0:	e02a      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a1d      	ldr	r2, [pc, #116]	@ (800051c <GPIO_PeriClockControl+0x1c0>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004aa:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ae:	4a16      	ldr	r2, [pc, #88]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004b0:	f023 0320 	bic.w	r3, r3, #32
 80004b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b6:	e01f      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a19      	ldr	r2, [pc, #100]	@ (8000520 <GPIO_PeriClockControl+0x1c4>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a10      	ldr	r2, [pc, #64]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004cc:	e014      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a14      	ldr	r2, [pc, #80]	@ (8000524 <GPIO_PeriClockControl+0x1c8>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	4a0b      	ldr	r2, [pc, #44]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e2:	e009      	b.n	80004f8 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a10      	ldr	r2, [pc, #64]	@ (8000528 <GPIO_PeriClockControl+0x1cc>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d105      	bne.n	80004f8 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	4a05      	ldr	r2, [pc, #20]	@ (8000508 <GPIO_PeriClockControl+0x1ac>)
 80004f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40020000 	.word	0x40020000
 8000508:	40023800 	.word	0x40023800
 800050c:	40020400 	.word	0x40020400
 8000510:	40020800 	.word	0x40020800
 8000514:	40020c00 	.word	0x40020c00
 8000518:	40021000 	.word	0x40021000
 800051c:	40021400 	.word	0x40021400
 8000520:	40021800 	.word	0x40021800
 8000524:	40021c00 	.word	0x40021c00
 8000528:	40022000 	.word	0x40022000

0800052c <GPIO_Init>:
 * @return          - None
 *
 * @Note            - None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temporary register
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2101      	movs	r1, #1
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff ff0c 	bl	800035c <GPIO_PeriClockControl>

	//1 . configure the mode of GPIO pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	2b03      	cmp	r3, #3
 800054a:	d820      	bhi.n	800058e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	461a      	mov	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	2103      	movs	r1, #3
 800056c:	fa01 f303 	lsl.w	r3, r1, r3
 8000570:	43db      	mvns	r3, r3
 8000572:	4619      	mov	r1, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	400a      	ands	r2, r1
 800057a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6819      	ldr	r1, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	430a      	orrs	r2, r1
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	e0cb      	b.n	8000726 <GPIO_Init+0x1fa>

	}else
	{
		//( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	795b      	ldrb	r3, [r3, #5]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d117      	bne.n	80005c6 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000596:	4b4b      	ldr	r3, [pc, #300]	@ (80006c4 <GPIO_Init+0x198>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	7912      	ldrb	r2, [r2, #4]
 800059e:	4611      	mov	r1, r2
 80005a0:	2201      	movs	r2, #1
 80005a2:	408a      	lsls	r2, r1
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a47      	ldr	r2, [pc, #284]	@ (80006c4 <GPIO_Init+0x198>)
 80005a8:	430b      	orrs	r3, r1
 80005aa:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	4b45      	ldr	r3, [pc, #276]	@ (80006c4 <GPIO_Init+0x198>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	43d2      	mvns	r2, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a41      	ldr	r2, [pc, #260]	@ (80006c4 <GPIO_Init+0x198>)
 80005c0:	400b      	ands	r3, r1
 80005c2:	6093      	str	r3, [r2, #8]
 80005c4:	e035      	b.n	8000632 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	795b      	ldrb	r3, [r3, #5]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d117      	bne.n	80005fe <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ce:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <GPIO_Init+0x198>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7912      	ldrb	r2, [r2, #4]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	4611      	mov	r1, r2
 80005de:	4a39      	ldr	r2, [pc, #228]	@ (80006c4 <GPIO_Init+0x198>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e4:	4b37      	ldr	r3, [pc, #220]	@ (80006c4 <GPIO_Init+0x198>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	7912      	ldrb	r2, [r2, #4]
 80005ec:	4611      	mov	r1, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	408a      	lsls	r2, r1
 80005f2:	43d2      	mvns	r2, r2
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a33      	ldr	r2, [pc, #204]	@ (80006c4 <GPIO_Init+0x198>)
 80005f8:	400b      	ands	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]
 80005fc:	e019      	b.n	8000632 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	2b06      	cmp	r3, #6
 8000604:	d115      	bne.n	8000632 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000606:	4b2f      	ldr	r3, [pc, #188]	@ (80006c4 <GPIO_Init+0x198>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	4611      	mov	r1, r2
 8000616:	4a2b      	ldr	r2, [pc, #172]	@ (80006c4 <GPIO_Init+0x198>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061c:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <GPIO_Init+0x198>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	4611      	mov	r1, r2
 800062c:	4a25      	ldr	r2, [pc, #148]	@ (80006c4 <GPIO_Init+0x198>)
 800062e:	430b      	orrs	r3, r1
 8000630:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	f003 0303 	and.w	r3, r3, #3
 8000642:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1f      	ldr	r2, [pc, #124]	@ (80006c8 <GPIO_Init+0x19c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d04e      	beq.n	80006ec <GPIO_Init+0x1c0>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a1e      	ldr	r2, [pc, #120]	@ (80006cc <GPIO_Init+0x1a0>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d032      	beq.n	80006be <GPIO_Init+0x192>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a1c      	ldr	r2, [pc, #112]	@ (80006d0 <GPIO_Init+0x1a4>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d02b      	beq.n	80006ba <GPIO_Init+0x18e>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <GPIO_Init+0x1a8>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d024      	beq.n	80006b6 <GPIO_Init+0x18a>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a19      	ldr	r2, [pc, #100]	@ (80006d8 <GPIO_Init+0x1ac>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d01d      	beq.n	80006b2 <GPIO_Init+0x186>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a18      	ldr	r2, [pc, #96]	@ (80006dc <GPIO_Init+0x1b0>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d016      	beq.n	80006ae <GPIO_Init+0x182>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <GPIO_Init+0x1b4>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d00f      	beq.n	80006aa <GPIO_Init+0x17e>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a15      	ldr	r2, [pc, #84]	@ (80006e4 <GPIO_Init+0x1b8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d008      	beq.n	80006a6 <GPIO_Init+0x17a>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <GPIO_Init+0x1bc>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <GPIO_Init+0x176>
 800069e:	2308      	movs	r3, #8
 80006a0:	e025      	b.n	80006ee <GPIO_Init+0x1c2>
 80006a2:	2300      	movs	r3, #0
 80006a4:	e023      	b.n	80006ee <GPIO_Init+0x1c2>
 80006a6:	2307      	movs	r3, #7
 80006a8:	e021      	b.n	80006ee <GPIO_Init+0x1c2>
 80006aa:	2306      	movs	r3, #6
 80006ac:	e01f      	b.n	80006ee <GPIO_Init+0x1c2>
 80006ae:	2305      	movs	r3, #5
 80006b0:	e01d      	b.n	80006ee <GPIO_Init+0x1c2>
 80006b2:	2304      	movs	r3, #4
 80006b4:	e01b      	b.n	80006ee <GPIO_Init+0x1c2>
 80006b6:	2303      	movs	r3, #3
 80006b8:	e019      	b.n	80006ee <GPIO_Init+0x1c2>
 80006ba:	2302      	movs	r3, #2
 80006bc:	e017      	b.n	80006ee <GPIO_Init+0x1c2>
 80006be:	2301      	movs	r3, #1
 80006c0:	e015      	b.n	80006ee <GPIO_Init+0x1c2>
 80006c2:	bf00      	nop
 80006c4:	40013c00 	.word	0x40013c00
 80006c8:	40020000 	.word	0x40020000
 80006cc:	40020400 	.word	0x40020400
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020c00 	.word	0x40020c00
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40021400 	.word	0x40021400
 80006e0:	40021800 	.word	0x40021800
 80006e4:	40021c00 	.word	0x40021c00
 80006e8:	40022000 	.word	0x40022000
 80006ec:	2300      	movs	r3, #0
 80006ee:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006f0:	4b59      	ldr	r3, [pc, #356]	@ (8000858 <GPIO_Init+0x32c>)
 80006f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f4:	4a58      	ldr	r2, [pc, #352]	@ (8000858 <GPIO_Init+0x32c>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fa:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80006fc:	7c7a      	ldrb	r2, [r7, #17]
 80006fe:	7cbb      	ldrb	r3, [r7, #18]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	fa02 f103 	lsl.w	r1, r2, r3
 8000706:	4a55      	ldr	r2, [pc, #340]	@ (800085c <GPIO_Init+0x330>)
 8000708:	7cfb      	ldrb	r3, [r7, #19]
 800070a:	3302      	adds	r3, #2
 800070c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000710:	4b53      	ldr	r3, [pc, #332]	@ (8000860 <GPIO_Init+0x334>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	7912      	ldrb	r2, [r2, #4]
 8000718:	4611      	mov	r1, r2
 800071a:	2201      	movs	r2, #1
 800071c:	408a      	lsls	r2, r1
 800071e:	4611      	mov	r1, r2
 8000720:	4a4f      	ldr	r2, [pc, #316]	@ (8000860 <GPIO_Init+0x334>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	799b      	ldrb	r3, [r3, #6]
 800072a:	461a      	mov	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	400a      	ands	r2, r1
 8000754:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6899      	ldr	r1, [r3, #8]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	430a      	orrs	r2, r1
 8000764:	609a      	str	r2, [r3, #8]

	//3. configure the pull up pull down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	79db      	ldrb	r3, [r3, #7]
 800076a:	461a      	mov	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	68da      	ldr	r2, [r3, #12]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	2103      	movs	r1, #3
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	400a      	ands	r2, r1
 8000794:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	68d9      	ldr	r1, [r3, #12]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]


	//4. configure the out put type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7a1b      	ldrb	r3, [r3, #8]
 80007aa:	461a      	mov	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685a      	ldr	r2, [r3, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2301      	movs	r3, #1
 80007c4:	408b      	lsls	r3, r1
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	400a      	ands	r2, r1
 80007d0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6859      	ldr	r1, [r3, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	430a      	orrs	r2, r1
 80007e0:	605a      	str	r2, [r3, #4]

	//5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	795b      	ldrb	r3, [r3, #5]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d131      	bne.n	800084e <GPIO_Init+0x322>
	{
		//configure the alternate function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	08db      	lsrs	r3, r3, #3
 80007f0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	7c3a      	ldrb	r2, [r7, #16]
 8000802:	3208      	adds	r2, #8
 8000804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	220f      	movs	r2, #15
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	7c3a      	ldrb	r2, [r7, #16]
 800081c:	4001      	ands	r1, r0
 800081e:	3208      	adds	r2, #8
 8000820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	7c3a      	ldrb	r2, [r7, #16]
 800082a:	3208      	adds	r2, #8
 800082c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7a5b      	ldrb	r3, [r3, #9]
 8000834:	461a      	mov	r2, r3
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	4618      	mov	r0, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	7c3a      	ldrb	r2, [r7, #16]
 8000846:	4301      	orrs	r1, r0
 8000848:	3208      	adds	r2, #8
 800084a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40013800 	.word	0x40013800
 8000860:	40013c00 	.word	0x40013c00

08000864 <GPIO_ReadFromInputPin>:
 *                    5. The function masks and shifts the IDR value to return only the
 *                       requested pin's state
 *                    6. Ensure the GPIO clock is enabled before calling this function
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
   uint8_t value;
   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 );
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	691a      	ldr	r2, [r3, #16]
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	fa22 f303 	lsr.w	r3, r2, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
   return value;
 8000882:	7bfb      	ldrb	r3, [r7, #15]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <I2C_GenerateStartCondition>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
//static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <I2C_ExecuteAddressPhaseWrite>:


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	f023 0301 	bic.w	r3, r3, #1
 80008c4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008c6:	78fa      	ldrb	r2, [r7, #3]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	611a      	str	r2, [r3, #16]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <I2C_ClearADDRFlag>:
	pI2Cx->DR = SlaveAddr;
}
*/

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b084      	sub	sp, #16
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d01f      	beq.n	800092c <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7f1b      	ldrb	r3, [r3, #28]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d112      	bne.n	800091a <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d11f      	bne.n	800093c <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa26 	bl	8000d54 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}

}
 8000918:	e010      	b.n	800093c <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	60fb      	str	r3, [r7, #12]
}
 800092a:	e007      	b.n	800093c <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	60fb      	str	r3, [r7, #12]
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <I2C_PeripheralControl>:


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d106      	bne.n	8000982 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f043 0201 	orr.w	r2, r3, #1
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000980:	e005      	b.n	800098e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f023 0201 	bic.w	r2, r3, #1
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	601a      	str	r2, [r3, #0]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <I2C_PeriClockControl>:
 *
 * @Note              -

 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d120      	bne.n	80009ec <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a22      	ldr	r2, [pc, #136]	@ (8000a38 <I2C_PeriClockControl+0xa0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d106      	bne.n	80009c0 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80009b2:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a21      	ldr	r2, [pc, #132]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
		{
			I2C3_PCLK_DI();
		}
	}

}
 80009be:	e035      	b.n	8000a2c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a40 <I2C_PeriClockControl+0xa8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d106      	bne.n	80009d6 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80009c8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009cc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 80009ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009d2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009d4:	e02a      	b.n	8000a2c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a44 <I2C_PeriClockControl+0xac>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d126      	bne.n	8000a2c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 80009de:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a16      	ldr	r2, [pc, #88]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 80009e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009ea:	e01f      	b.n	8000a2c <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <I2C_PeriClockControl+0xa0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d106      	bne.n	8000a02 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	4a10      	ldr	r2, [pc, #64]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 80009fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80009fe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a00:	e014      	b.n	8000a2c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <I2C_PeriClockControl+0xa8>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 8000a10:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a16:	e009      	b.n	8000a2c <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <I2C_PeriClockControl+0xac>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d105      	bne.n	8000a2c <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <I2C_PeriClockControl+0xa4>)
 8000a26:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000a2a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40005800 	.word	0x40005800
 8000a44:	40005c00 	.word	0x40005c00

08000a48 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
	...

08000a58 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000a5e:	4b25      	ldr	r3, [pc, #148]	@ (8000af4 <RCC_GetPCLK1Value+0x9c>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000a6c:	7a7b      	ldrb	r3, [r7, #9]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <RCC_GetPCLK1Value+0xa0>)
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e00b      	b.n	8000a90 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000a78:	7a7b      	ldrb	r3, [r7, #9]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d102      	bne.n	8000a84 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000afc <RCC_GetPCLK1Value+0xa4>)
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e005      	b.n	8000a90 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000a84:	7a7b      	ldrb	r3, [r7, #9]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d102      	bne.n	8000a90 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000a8a:	f7ff ffdd 	bl	8000a48 <RCC_GetPLLOutputClock>
 8000a8e:	60f8      	str	r0, [r7, #12]
	}

	//for AHB
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000a90:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <RCC_GetPCLK1Value+0x9c>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	091b      	lsrs	r3, r3, #4
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f003 030f 	and.w	r3, r3, #15
 8000a9c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000a9e:	7a3b      	ldrb	r3, [r7, #8]
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	d802      	bhi.n	8000aaa <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	72fb      	strb	r3, [r7, #11]
 8000aa8:	e005      	b.n	8000ab6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000aaa:	7a3b      	ldrb	r3, [r7, #8]
 8000aac:	3b08      	subs	r3, #8
 8000aae:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <RCC_GetPCLK1Value+0xa8>)
 8000ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab4:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <RCC_GetPCLK1Value+0x9c>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	0a9b      	lsrs	r3, r3, #10
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000ac4:	7a3b      	ldrb	r3, [r7, #8]
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d802      	bhi.n	8000ad0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000aca:	2301      	movs	r3, #1
 8000acc:	72bb      	strb	r3, [r7, #10]
 8000ace:	e004      	b.n	8000ada <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000ad0:	7a3b      	ldrb	r3, [r7, #8]
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8000b04 <RCC_GetPCLK1Value+0xac>)
 8000ad6:	5cd3      	ldrb	r3, [r2, r3]
 8000ad8:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000ada:	7afb      	ldrb	r3, [r7, #11]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ae2:	7abb      	ldrb	r3, [r7, #10]
 8000ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae8:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000aea:	687b      	ldr	r3, [r7, #4]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	00f42400 	.word	0x00f42400
 8000afc:	007a1200 	.word	0x007a1200
 8000b00:	20000020 	.word	0x20000020
 8000b04:	20000030 	.word	0x20000030

08000b08 <I2C_Init>:
 *
 * @Note              -

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff3c 	bl	8000998 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	7a5b      	ldrb	r3, [r3, #9]
 8000b24:	029b      	lsls	r3, r3, #10
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000b38:	f7ff ff8e 	bl	8000a58 <RCC_GetPCLK1Value>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a47      	ldr	r2, [pc, #284]	@ (8000c5c <I2C_Init+0x154>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	0c9b      	lsrs	r3, r3, #18
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b56:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7a1b      	ldrb	r3, [r3, #8]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b6e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4a36      	ldr	r2, [pc, #216]	@ (8000c60 <I2C_Init+0x158>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d80f      	bhi.n	8000baa <I2C_Init+0xa2>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000b8a:	f7ff ff65 	bl	8000a58 <RCC_GetPCLK1Value>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000b9c:	897b      	ldrh	r3, [r7, #10]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	e02c      	b.n	8000c04 <I2C_Init+0xfc>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bb0:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7a9b      	ldrb	r3, [r3, #10]
 8000bb6:	039b      	lsls	r3, r3, #14
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7a9b      	ldrb	r3, [r3, #10]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10b      	bne.n	8000bde <I2C_Init+0xd6>
		{
			// if DUTY = 0 ; T high = CCR * TPCLK1 ; T low =2* CCR * TPCLK1
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000bc6:	f7ff ff47 	bl	8000a58 <RCC_GetPCLK1Value>
 8000bca:	4601      	mov	r1, r0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bda:	817b      	strh	r3, [r7, #10]
 8000bdc:	e00c      	b.n	8000bf8 <I2C_Init+0xf0>
		}else
		{
			// if DUTY = 0 ; T high = 9 * CCR * TPCLK1 ; T low =16 * CCR * TPCLK1
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000bde:	f7ff ff3b 	bl	8000a58 <RCC_GetPCLK1Value>
 8000be2:	4601      	mov	r1, r0
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	009a      	lsls	r2, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bf6:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000bf8:	897b      	ldrh	r3, [r7, #10]
 8000bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4a13      	ldr	r2, [pc, #76]	@ (8000c60 <I2C_Init+0x158>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d809      	bhi.n	8000c2a <I2C_Init+0x122>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000c16:	f7ff ff1f 	bl	8000a58 <RCC_GetPCLK1Value>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c5c <I2C_Init+0x154>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	3301      	adds	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e00d      	b.n	8000c46 <I2C_Init+0x13e>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000c2a:	f7ff ff15 	bl	8000a58 <RCC_GetPCLK1Value>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	0a5b      	lsrs	r3, r3, #9
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <I2C_Init+0x15c>)
 8000c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c40:	09db      	lsrs	r3, r3, #7
 8000c42:	3301      	adds	r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c50:	621a      	str	r2, [r3, #32]

}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	431bde83 	.word	0x431bde83
 8000c60:	000186a0 	.word	0x000186a0
 8000c64:	00044b83 	.word	0x00044b83

08000c68 <I2C_GetFlagStatus>:
        I2C3_REG_RESET();
    }
}

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	695a      	ldr	r2, [r3, #20]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b084      	sub	sp, #16
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fdf4 	bl	800088e <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000ca6:	bf00      	nop
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ffda 	bl	8000c68 <I2C_GetFlagStatus>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f6      	beq.n	8000ca8 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	78fa      	ldrb	r2, [r7, #3]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fdf2 	bl	80008ac <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000cc8:	bf00      	nop
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2102      	movs	r1, #2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffc9 	bl	8000c68 <I2C_GetFlagStatus>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f6      	beq.n	8000cca <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff fdfa 	bl	80008d6 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000ce2:	e014      	b.n	8000d0e <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000ce4:	bf00      	nop
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2180      	movs	r1, #128	@ 0x80
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ffbb 	bl	8000c68 <I2C_GetFlagStatus>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f6      	beq.n	8000ce6 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	781a      	ldrb	r2, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	3301      	adds	r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
		Len--;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e7      	bne.n	8000ce4 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000d14:	bf00      	nop
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2180      	movs	r1, #128	@ 0x80
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ffa3 	bl	8000c68 <I2C_GetFlagStatus>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f6      	beq.n	8000d16 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000d28:	bf00      	nop
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2104      	movs	r1, #4
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff99 	bl	8000c68 <I2C_GetFlagStatus>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f6      	beq.n	8000d2a <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000d3c:	7e3b      	ldrb	r3, [r7, #24]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d104      	bne.n	8000d4c <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fdfc 	bl	8000944 <I2C_GenerateStopCondition>

}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d106      	bne.n	8000d74 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000d72:	e005      	b.n	8000d80 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <__libc_init_array>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	4d0d      	ldr	r5, [pc, #52]	@ (8000dc4 <__libc_init_array+0x38>)
 8000d90:	4c0d      	ldr	r4, [pc, #52]	@ (8000dc8 <__libc_init_array+0x3c>)
 8000d92:	1b64      	subs	r4, r4, r5
 8000d94:	10a4      	asrs	r4, r4, #2
 8000d96:	2600      	movs	r6, #0
 8000d98:	42a6      	cmp	r6, r4
 8000d9a:	d109      	bne.n	8000db0 <__libc_init_array+0x24>
 8000d9c:	4d0b      	ldr	r5, [pc, #44]	@ (8000dcc <__libc_init_array+0x40>)
 8000d9e:	4c0c      	ldr	r4, [pc, #48]	@ (8000dd0 <__libc_init_array+0x44>)
 8000da0:	f000 f818 	bl	8000dd4 <_init>
 8000da4:	1b64      	subs	r4, r4, r5
 8000da6:	10a4      	asrs	r4, r4, #2
 8000da8:	2600      	movs	r6, #0
 8000daa:	42a6      	cmp	r6, r4
 8000dac:	d105      	bne.n	8000dba <__libc_init_array+0x2e>
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db4:	4798      	blx	r3
 8000db6:	3601      	adds	r6, #1
 8000db8:	e7ee      	b.n	8000d98 <__libc_init_array+0xc>
 8000dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dbe:	4798      	blx	r3
 8000dc0:	3601      	adds	r6, #1
 8000dc2:	e7f2      	b.n	8000daa <__libc_init_array+0x1e>
 8000dc4:	08000df4 	.word	0x08000df4
 8000dc8:	08000df4 	.word	0x08000df4
 8000dcc:	08000df4 	.word	0x08000df4
 8000dd0:	08000df8 	.word	0x08000df8

08000dd4 <_init>:
 8000dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd6:	bf00      	nop
 8000dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dda:	bc08      	pop	{r3}
 8000ddc:	469e      	mov	lr, r3
 8000dde:	4770      	bx	lr

08000de0 <_fini>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr
